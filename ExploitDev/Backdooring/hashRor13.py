#!/bin/python
import sys
import os 
ror = lambda val, r_bits, max_bits: \
	((val & (2**max_bits-1)) >> r_bits%max_bits) | \
	(val << (max_bits-(r_bits%max_bits)) & (2**max_bits-1))

def hashRor13Lib(strVar):
	hashRes=0
	uB = len (strVar)*2+2
	for x in xrange(0,uB):
		if(x<len(strVar*2)):
			if(x%2==0):
				asci=ord(strVar[x/2])
				if(ord(strVar[x/2])>=0x61):
					asci=ord(strVar[x/2])-0x20
			if(x%2==1):
				asci=0
		else:
			asci=0
		hashRes=ror(hashRes, 0x0D, 32)
		hashRes=hashRes+asci
	return hashRes

def hashRor13Func(strVar):
	hashRes=0
	for c in strVar:
		asci=ord(c)
		hashRes=ror(hashRes, 0x0D, 32)
		hashRes=hashRes+asci
	return hashRes

def hashRor13(Lib,Func):
	#print "%x" % hashRor13Lib(Lib)
	#print "%x" % ror(hashRor13Func(Func),0xD,32)
	return (hashRor13Lib(Lib)+ror(hashRor13Func(Func),0x0D,32))&0xffffffff

def main():
	if len(sys.argv) != 3:
		print "Usage: hashRor13.py library.dll FuncName"
		print "       hashRor13.py library.dll functions.txt"
		return 0
	if  os.path.isfile("./"+sys.argv[2]):
		functions = open(sys.argv[2], "r")
		for function in functions:
			print "%x : for %s in %s" % (hashRor13(sys.argv[1],function.rstrip("\n\r")),function.rstrip("\n\r"), sys.argv[1])
		functions.close()
	else:
		print "%x : for %s in %s" % (hashRor13(sys.argv[1],sys.argv[2]),sys.argv[2], sys.argv[1])

if __name__ == "__main__":
	main()

#8AF6AD5F

